/*----------------- REXX ---------- PERGEN --------------*/
R1='';S1='';R2='';S2='';R3='';S3='';R4='';S4='';R5='';S5=''
R6='';S6='';R7='';S7='';R8='';S8='';R9='';S9='';R0='';S0=''
G=0 ; H=0 ; I=0 ; J=0 ; K=0 ; L=0 ; M=0 ; N=0 ; O=0 ; P=0
Q=0 ; R=0 ; S=0 ; T=0 ; U=0 ; V=0 ; W=0 ; Y=0 ; Z=0 ; @=0
RESUL='' ; RANT=0
VALORES='ABCDEFGHIJKLMNOPQRSTUVWXYZ@0123456789 +-*/%().,'
ADDRESS ISPEXEC
'ADDPOP'
load_info = loadispf()         /* Load in-line panels and execs */
CASIOW:
NUMERIC DIGITS 40
SIGNAL ON SYNTAX
DO FOREVER
   'DISPLAY PANEL(PCASIO)'
   IF RC=8 THEN DO
     x = dropispf(load_info)   /* Drop in-line panels and execs */
     EXIT
     END
   PUSH RISTRA
   PULL RISTRA .
   IF LEFT(RISTRA,1) = '.' THEN
     RISTRA=0||RISTRA
   D1=SUBSTR(RISTRA,1,1)
   D2=VERIFY(D1,'GHIJKLMNOPQRSTUVWXYZ@')
   IF D2>0 THEN IF ¬DATATYPE(D1,'N') & D1¬='(' THEN RISTRA2=RANT||RISTRA
                ELSE RISTRA2=RISTRA
   ELSE RISTRA2=RISTRA
   IF VERIFY(RISTRA2,VALORES)¬=0 THEN SIGNAL SYNTAX
   IF INDEX(RISTRA2,',')¬=0 THEN SIGNAL COMAPUNTO
   ELSE DO
      INTERPRET 'RESUL='RISTRA2
      CALL CAMBIO
      pcalchex = d2x(trunc(abs(resul)))
   END
END
EXIT

SYNTAX:
  ERR='THE ENTER VALUE 'RISTRA' IS NOT CORRECT'
  ERR=ERR||' '||'Ý'ERRORTEXT(RC)'¨'
  if errortext(rc) = 'Incorrect call to routine' then
    pcalchex = '?'
  else
    'SETMSG MSG(CASI010)'
SIGNAL CASIOW

COMAPUNTO:
  ERR='DEBE UTILIZAR ''.'' PARA LOS DECIMALES EN VEZ DE '','' '
  /* THIS IS FOR SPANISH NUMBERS */
  'SETMSG MSG(CASI010)'
SIGNAL CASIOW

CAMBIO:
  S0=S9;S9=S8;S8=S7;S7=S6;S6=S5;S5=S4;S4=S3;S3=S2;S2=S1;S1=R0
  R0=R9;R9=R8;R8=R7;R7=R6;R6=R5;R5=R4;R4=R3;R3=R2;R2=R1;R1=RESUL
  G=R1;H=R2;I=R3;J=R4;K=R5;L=R6;M=R7;N=R8;O=R9;P=R0
  Q=S1;R=S2;S=S3;T=S4;U=S5;V=S6;W=S7;Y=S8;Z=S9;@=S0
  IF G='' THEN G=0 ; IF H='' THEN H=0 ; IF I='' THEN I=0
  IF J='' THEN J=0 ; IF K='' THEN K=0 ; IF L='' THEN L=0
  IF M='' THEN M=0 ; IF N='' THEN N=0 ; IF O='' THEN O=0
  IF P='' THEN P=0 ; IF Q='' THEN Q=0 ; IF R='' THEN R=0
  IF S='' THEN S=0 ; IF T='' THEN T=0 ; IF U='' THEN U=0
  IF V='' THEN V=0 ; IF W='' THEN W=0 ; IF Y='' THEN Y=0
  IF Z='' THEN Z=0 ; IF @='' THEN @=0
  RANT=RESUL
RETURN

X:                   /* From PCALC */
  Parse Arg Input ;
Return X2D(Input)
                     /* From Roy Cole <David.Cole@STATE.AR.US> */
SQRT:
  arg sq
  if sq < 1 then return 0
  sr = 0
  ss = 30
  do until ss = sr
    sr = ss
    ss = (sr + sq/sr)/2
    end
return sr
/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ----------------------------------------------------------
 DropISPF: Procedure ; return 0    /* PGXLITE */              */
 DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
     parse value load_info with dd libd load_info
     if left(libd,6) = "ALTLIB" then do
        if libd = "ALTLIBC" then lib = "CLIST"
                            else lib = "EXEC"
        Address TSO,
          "Altlib Deact Application("lib")"
        end
     else "libdef" libd
     address tso "free f("dd")"
     end
  return 0
/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ----------------------------------------------------------
 LoadISPF: Procedure ; return 0    /* PGXLITE */              */
 LoadISPF: Procedure

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd ALTLIBC)
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd ALTLIBE)
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd ISPMLIB)
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd ISPPLIB)
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd ISPSLIB)
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end
 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
/*
>START
>panel PCASIO
)ATTR DEFAULT(%+_)
  $ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(RIGHT) SKIP(ON)
  ! COLOR(RED) HILITE(REVERSE) PAD(' ') JUST(RIGHT)
  ¢ TYPE(OUTPUT) INTENS(LOW) PAD(' ')
  } TYPE(TEXT) COLOR(GREEN)
)BODY WINDOW(71,20)
%
% Operation  %===>_RISTRA                                             +
+
+-------------------------------%Memories+-----------------------------
}G¢R1                              }Q¢S1                              }
}H¢R2                              }R¢S2                              }
}I¢R3                              }S¢S3                              }
}J¢R4                              }T¢S4                              }
}K¢R5                              }U¢S5                              }
}L¢R6                              }V¢S6                              }
}M¢R7                              }W¢S7                              }
}N¢R8                              }Y¢S8                              }
}O¢R9                              }Z¢S9                              }
}P¢R0                              }@¢S0                              }
+-------------------------------%Outputs+------------------------------
+ Output     %===>!RESUL                                           +Dec
+                             !PCALCHEX                            +Hex
%
+            %PF3-End+            %PF1-Help+          @Pergentino Arias
+                                                      y Janko
)INIT
   &ZWINTTL='< C A L C U L A D O R A >'
  .CURSOR = RISTRA
  .ATTR(.CURSOR) = 'HILITE(REVERSE)'
  .HELP=PCASIOH
)PROC
    VER (&RISTRA,NB)
)END
>panel PCASIOH
)ATTR DEFAULT(¢|_)
  } TYPE(TEXT) COLOR(TURQ)
)BODY
¢---------------------------< C A L C U L A D O R A >---------------------------
¢------------------------------- Instrucciones ---------------------------------
¢
¢
¢            o} One blank indicates end of operation field.
¢            o} x(0-f...0-f) notation is for hexadecimal constants.
¢            o} The letters at the lower part of the panel are memories
¢             } and can be used in the operation field.
¢
¢           |** }Exponent
¢           |%  }Integer division
¢           |// }Remainder of the division (modulus)
¢           |+  }Addition
¢           |-  }Subtraction
¢           |*  }Multiplication
¢           |/  }Division
¢
¢            Examples:  7/2 = 3.5   7//2 = 1   7%2 = 3   3**2 = 9
¢                       345.6; 23+G-0.6    =   368
¢                       x(10000)-(x(ff)+3) =  FEFE HEX
)INIT
)END
>msg CASI01
CASI010 .ALARM=YES .WINDOW=RESP
'&ERR'
>END */
